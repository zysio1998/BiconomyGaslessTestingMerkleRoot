{"version":3,"sources":["EthStuff.js","networks.js","reportWebVitals.js","index.js"],"names":["walletProvider","walletSigner","contract","biconomy","networks","CONTRACT_ADDRESS","web3","createAlchemyWeb3","require","App","useState","currentAccount","setCurrentAccount","selectedAddress","setSelectedAddress","loading","setloading","setNetwork","passedTxnHash","init","a","window","ethereum","isMetaMask","Biconomy","ethers","providers","JsonRpcProvider","apiKey","debug","console","log","Web3Provider","getSigner","getAddress","userAddress","onEvent","READY","Contract","myNft","abi","getSignerByAddress","utils","Interface","ERROR","error","message","checkIfWalletIsConnected","handleChainChanged","_chainId","location","reload","request","method","accounts","length","account","chainId","on","connectWallet","alert","askContractToMintNftWhiteList","axios","get","params","address","then","response","_merkleProof","data","proof","provider","getEthersProvider","populateTransaction","mintNFT","myHash","glass","estimateGas","to","from","gasLimit","txParams","signatureType","send","tx","Swal","fire","icon","title","text","once","transaction","html","transactionHash","width","padding","color","background","backdrop","replay_tx","eth","call","pullCall","revertReason","useEffect","className","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.18295e22.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport './EthStuff.css';\r\nimport { ethers } from \"ethers\"\r\nimport { Biconomy } from \"@biconomy/mexa\";\r\nimport myNft from \"./GaslessTransactions.json\"\r\nimport {networks} from \"./networks\"\r\nimport Swal from 'sweetalert2'\r\nimport axios from \"axios\";\r\n\r\nconst CONTRACT_ADDRESS = \"0x85F325ae587C36D9d24F5e93Aab11e3c04712345\"; //kovan mainnet\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(\"https://eth-kovan.alchemyapi.io/v2/ADXYfZxHoqDZPB5sMp-LA4LlHnlavdN1\"); \r\nlet ethersProvider, walletProvider, walletSigner\r\nlet contract, contractInterface\r\nlet biconomy\r\n\r\nconst App = () => {\r\n  const [currentAccount, setCurrentAccount] = useState(\"\");\r\n  const [selectedAddress, setSelectedAddress] = useState('')\r\n  const [loading, setloading] = useState(false);\r\n  const [network, setNetwork] = useState('')\r\n\r\n  var passedTxnHash = ''\r\n\r\n  const init = async () => {\r\n    if (typeof window.ethereum !== 'undefined' && window.ethereum.isMetaMask) {    \r\n      biconomy = new Biconomy(new ethers.providers.JsonRpcProvider(\"https://eth-kovan.alchemyapi.io/v2/ADXYfZxHoqDZPB5sMp-LA4LlHnlavdN1\"), {\r\n        walletProvider: window.ethereum, \r\n        apiKey: '8FBNI6KMg.2d9fe647-e047-4088-a811-aee29e99cb25',\r\n        debug: true,\r\n      })\r\n      console.log(biconomy, \"checking\")\r\n\r\n      // two providers one with biconomy andd other for the wallet signing the transaction\r\n      ethersProvider = new ethers.providers.Web3Provider(biconomy)\r\n      walletProvider = new ethers.providers.Web3Provider(window.ethereum)\r\n      walletSigner = walletProvider.getSigner()\r\n\r\n      let userAddress = await walletSigner.getAddress()\r\n      setSelectedAddress(userAddress)\r\n\r\n      // init dApp stuff like contracts and interface\r\n      biconomy\r\n        .onEvent(biconomy.READY, async () => {\r\n          contract = new ethers.Contract(\r\n            CONTRACT_ADDRESS,\r\n            myNft.abi,\r\n            biconomy.getSignerByAddress(userAddress)\r\n          )\r\n\r\n          contractInterface = new ethers.utils.Interface(myNft.abi)\r\n          setloading(false)\r\n          // setInitLoading(1)\r\n        })\r\n        .onEvent(biconomy.ERROR, (error, message) => {\r\n          console.log(message)\r\n          console.log(error)\r\n        })\r\n    } else {\r\n      console.log('Metamask not installed')\r\n    }\r\n  }\r\n\r\n  const checkIfWalletIsConnected = async () => {\r\n    const { ethereum } = window;\r\n\r\n    if (!ethereum) {\r\n      console.log(\"Make sure you have metamask!\");\r\n      return;\r\n    } else {\r\n      console.log(\"We have the ethereum object\", ethereum);\r\n    }\r\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\r\n\r\n    if (accounts.length !== 0) {\r\n      const account = accounts[0];\r\n      console.log(\"Found an authorized account:\", account);\r\n      setCurrentAccount(account)      \r\n    } else {\r\n      console.log(\"No authorized account found\")\r\n    }\r\n\r\n    // This is the new part, we check the user's network chain ID\r\n    const chainId = await ethereum.request({ method: 'eth_chainId' })\r\n    setNetwork(networks[chainId])\r\n\r\n    ethereum.on('chainChanged', handleChainChanged)\r\n\r\n    function handleChainChanged(_chainId) {\r\n      window.location.reload()\r\n    }\r\n  }\r\n\r\n  const connectWallet = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n      if (!ethereum) {\r\n        alert(\"Get MetaMask!\");\r\n        return;\r\n      }\r\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\r\n      console.log(\"Connected\", accounts[0]);\r\n      setCurrentAccount(accounts[0]);\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }  \r\n\r\n  const askContractToMintNftWhiteList = async () => {\r\n    try {\r\n      if(currentAccount !== ''){\r\n      setloading(true)\r\n      const { ethereum } = window;\r\n      if (ethereum) {\r\n        let userAddress = selectedAddress  \r\n        \r\n        let _merkleProof \r\n        await axios\r\n          .get(\"https://scarce-guttural-museum.glitch.me/\", {\r\n            params: { address: currentAccount },\r\n          })\r\n          .then((response) => (_merkleProof = response.data.proof));\r\n          \r\n        console.log(biconomy)\r\n          let provider = biconomy.getEthersProvider();\r\n\r\n          let { data } = await contract.populateTransaction.mintNFT(_merkleProof);\r\n          \r\n          const myHash = data\r\n          const glass = () => {   //used to pass it as a global variabe for the catch to display the revert reason       \r\n            passedTxnHash = myHash  \r\n            return passedTxnHash          \r\n          }\r\n          glass()\r\n          \r\n          let gasLimit = await provider.estimateGas({\r\n            to: CONTRACT_ADDRESS,\r\n            from: userAddress,\r\n            data: data\r\n          });\r\n          console.log(\"Gas limit : \", gasLimit);\r\n\r\n          let txParams = {\r\n            data: data,\r\n            to: CONTRACT_ADDRESS,\r\n            from: userAddress,\r\n            gasLimit: 10000000,\r\n            signatureType: \"EIP712_SIGN\"\r\n          };\r\n          console.log(txParams)\r\n\r\n          let tx\r\n          try {\r\n            tx = await provider.send(\"eth_sendTransaction\", [txParams])\r\n          }\r\n          catch (err) {\r\n            console.log(\"handle errors like signature denied here\");\r\n            console.log(err);\r\n\r\n            if(err.message == \"MetaMask Message Signature: User denied message signature.\"){\r\n              Swal.fire({\r\n                icon: 'error',\r\n                title: 'Minting Failed',\r\n                text: 'Minting failed, you rejected the transaction, try again',         \r\n              }) \r\n              setloading(false) \r\n              return 0;\r\n            }else{\r\n              Swal.fire({\r\n                icon: 'error',\r\n                title: 'Minting Failed, try again in a moment',                           \r\n              })\r\n            }               \r\n          }    \r\n          console.log(\"Transaction hash : \", tx);\r\n          provider.once(tx, (transaction) => {\r\n            console.log(transaction, \"emited\");\r\n            setloading(false)\r\n            Swal.fire({\r\n              title: 'Minting successful',\r\n              html:\r\n                'Check your transaction below' +\r\n                `<a href=' https://kovan.etherscan.io/tx/${transaction.transactionHash}' target=\"_blank\"> https://kovan.etherscan.io/</a> ` +\r\n                '',\r\n              width: 600,\r\n              padding: '3em',\r\n              color: '#000000',\r\n              background: '#fff',\r\n              backdrop: `\r\n                rgba(0,0,0,0.4)                \r\n                left top\r\n                no-repeat\r\n              `\r\n            })\r\n          });\r\n          console.log(\"Going to pop wallet now to pay gas...\")\r\n          console.log(\"Mining...please wait.\")    \r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    }else{\r\n      Swal.fire(\r\n        'Connect wallet',\r\n        'Before minting you must connect your wallet',\r\n        'question'\r\n      )\r\n    }\r\n      \r\n    } catch (error) {\r\n      setloading(false)\r\n\r\n      //sending an eth call to get the revert reason\r\n      let replay_tx = {\r\n        to: CONTRACT_ADDRESS,\r\n        from: currentAccount,        \r\n        data: passedTxnHash,\r\n      }      \r\n        \r\n      try{\r\n        const pullCall = await web3.eth.call(replay_tx)\r\n        console.log(\"Working ok\", pullCall)\r\n      }catch (error){        \r\n        console.log(\"my own error\" ,error.data) \r\n        var revertReason = error.data;   \r\n        if(revertReason == \"Reverted 0x08c379a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001d43616e6e6f74206d696e74206d6f7265207468616e20616c6c6f776564000000\"){\r\n          Swal.fire({\r\n            icon: 'error',\r\n            title: 'Minting Failed',\r\n            text: 'Cannot mint more than 1 NFT',\r\n           \r\n          })          \r\n        }else if(revertReason == \"Reverted 0x08c379a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001653616c6520686173206e6f7420626567756e2079657400000000000000000000\"){\r\n          Swal.fire({\r\n            icon: 'error',\r\n            title: 'Minting Failed',\r\n            text: 'Sale has not begun yet',\r\n           \r\n          })\r\n        }else if(revertReason == \"Reverted 0x08c379a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000015496e76616c6964204d65726b6c652050726f6f662e0000000000000000000000\"){\r\n          Swal.fire({\r\n            icon: 'error',\r\n            title: 'Minting Failed',\r\n            text: 'You are not on the whitelist',\r\n           \r\n          })\r\n        }else if(revertReason == \"Reverted 0x08c379a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000154e6f7420656e6f756768204e465473206c656674210000000000000000000000\"){\r\n          Swal.fire({\r\n            icon: 'error',\r\n            title: 'Minting Failed',\r\n            text: 'All the NFTs are sold out',\r\n           \r\n          })\r\n        }else{\r\n          Swal.fire({\r\n            icon: 'error',\r\n            title: 'Minting Failed',\r\n            text: 'Please try again',\r\n           \r\n          })   \r\n        }       \r\n      }      \r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected();\r\n    if(currentAccount !== ''){\r\n      setloading(true)\r\n    }\r\n\r\n    if (currentAccount !== '') {\r\n      console.log('init')\r\n      init()\r\n    }\r\n  }, [currentAccount])\r\n\r\n\r\n  const renderNotConnectedContainer = () => (\r\n    <button onClick={connectWallet} className=\"josh\">\r\n      Connect to Wallet\r\n    </button>\r\n  );\r\n  \r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {\r\n        loading ?\r\n          <div className=\"loading\">\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n          </div>\r\n          :\r\n          \"\"}\r\n      <div className={loading ? \"container disabledbutton\" : \"container\"}>\r\n        \r\n          <div className=\"container\">\r\n            {currentAccount === \"\" ? (\r\n              renderNotConnectedContainer()\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n       \r\n        <div className=\"container2\">\r\n          <div className=\"row body\">\r\n            <div className=\"col-md-6 tesboddy ff\">   \r\n              <div className=\" mint_div \">\r\n                <button onClick={askContractToMintNftWhiteList} className=\"cta-button connect-wallet-button\">\r\n                  Claim free gasless NFT Whitelist\r\n                </button>                \r\n              </div>\r\n            </div>\r\n            <div className=\"col-md-6 ff\">\r\n              \r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;","const networks = {\r\n    '0x1': 'Mainnet',\r\n    '0x3': 'Ropsten',\r\n    '0x2a': 'Kovan',\r\n    '0x4': 'Rinkeby',\r\n    '0x5': 'Goerli',\r\n    '0x61': 'BSC Testnet',\r\n    '0x38': 'BSC Mainnet',\r\n    '0x89': 'Polygon Mainnet',\r\n    '0x13881': 'Polygon Mumbai Testnet',\r\n    '0xa86a': 'AVAX Mainnet',\r\n  }\r\n  \r\n  export { networks }","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport EthStuff from './EthStuff'\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <EthStuff />    \r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}